version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./loads.sql:/docker-entrypoint-initdb.d/loads.sql
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5

  load-service:
    image: happyrobot-loads
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    env_file: .env
    volumes:
      - ./allowed_references.csv:/app/allowed_references.csv
    command: python find_available_loads.py
    depends_on:
      postgres:
        condition: service_healthy

  load-service-db:
    image: happyrobot-loads-db
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    env_file: .env
    command: python find_available_loads_db.py
    depends_on:
      postgres:
        condition: service_healthy

  carrier-service:
    image: happyrobot-carriers
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    env_file: .env
    command: python verify_carrier.py
    depends_on:
      postgres:
        condition: service_healthy

  reverse-proxy:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf   # Ensure this file exists and is valid.
      - ./ssl-certs:/etc/ssl/certs          # Ensure this directory contains valid SSL certificates.
    depends_on:
      - load-service
      - load-service-db
      - carrier-service
    restart: unless-stopped

volumes:
  postgres_data:
